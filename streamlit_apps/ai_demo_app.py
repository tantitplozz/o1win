import random
import time
from datetime import datetime, timedelta

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import streamlit as st

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à
st.set_page_config(
    page_title="AI ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", 
    page_icon="üí∞",
    layout="wide"
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
def generate_transactions(n=100):
    merchants = ["‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ A", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ B", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ C", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ D", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ E"]
    card_types = ["Visa", "Mastercard", "JCB", "UnionPay", "American Express"]
    categories = ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤", "‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå", "‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á", "‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß"]
    statuses = ["‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"]
    
    now = datetime.now()
    
    data = []
    for i in range(n):
        timestamp = now - timedelta(days=random.randint(0, 30), hours=random.randint(0, 23))
        amount = round(random.uniform(100, 10000), 2)
        status = random.choices(statuses, weights=[0.8, 0.1, 0.1])[0]
        
        data.append({
            "id": f"T{1000 + i}",
            "timestamp": timestamp,
            "merchant": random.choice(merchants),
            "category": random.choice(categories),
            "amount": amount,
            "card_type": random.choice(card_types),
            "status": status,
        })
    
    return pd.DataFrame(data)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
def analyze_risk(transactions_df):
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    high_risk = []
    medium_risk = []
    low_risk = []
    
    for idx, row in transactions_df.iterrows():
        risk_score = random.random()
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        if row['amount'] > 5000 or risk_score > 0.9:
            high_risk.append(row['id'])
        elif row['amount'] > 2000 or risk_score > 0.7:
            medium_risk.append(row['id'])
        else:
            low_risk.append(row['id'])
    
    return {
        "high_risk": high_risk,
        "medium_risk": medium_risk,
        "low_risk": low_risk,
    }

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
def recommend_card(merchant):
    recommendations = {
        "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ A": ["Visa", "JCB"],
        "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ B": ["Mastercard", "American Express"],
        "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ C": ["Visa", "Mastercard"],
        "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ D": ["JCB", "UnionPay"],
        "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ E": ["American Express", "Visa"],
    }
    
    return recommendations.get(merchant, ["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
def analyze_daily_trends(transactions_df):
    transactions_df['date'] = transactions_df['timestamp'].dt.date
    daily_sum = transactions_df.groupby('date')['amount'].sum().reset_index()
    daily_count = transactions_df.groupby('date')['id'].count().reset_index()
    daily_count.rename(columns={'id': 'count'}, inplace=True)
    
    result = pd.merge(daily_sum, daily_count, on='date')
    return result

# ------ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• UI ------
st.title("üß† ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ AI")
st.write("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
if 'transactions' not in st.session_state:
    st.session_state.transactions = generate_transactions(200)
    st.session_state.risk_analysis = analyze_risk(st.session_state.transactions)
    
transactions = st.session_state.transactions
risk_analysis = st.session_state.risk_analysis

# ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ó‡∏õ
tab1, tab2, tab3, tab4 = st.tabs(["üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°", "üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°", "‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"])

with tab1:
    st.header("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(transactions):,}")
    with col2:
        successful = len(transactions[transactions['status'] == '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'])
        st.metric("‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"{successful:,}", f"{successful/len(transactions):.1%}")
    with col3:
        total_amount = transactions['amount'].sum()
        st.metric("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°", f"‡∏ø{total_amount:,.2f}")
    with col4:
        high_risk_count = len(risk_analysis['high_risk'])
        st.metric("‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á", f"{high_risk_count}", f"{high_risk_count/len(transactions):.1%}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    st.subheader("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    daily_trends = analyze_daily_trends(transactions)
    
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(daily_trends['date'], daily_trends['amount'], marker='o', linewidth=2, color='#1f77b4')
    ax.set_xlabel('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')
    ax.set_ylabel('‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)')
    ax.grid(True, linestyle='--', alpha=0.7)
    fig.autofmt_xdate()
    st.pyplot(fig)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£
    st.subheader("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£")
    card_distribution = transactions.groupby('card_type')['amount'].sum()
    
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.pie(card_distribution, labels=card_distribution.index, autopct='%1.1f%%', startangle=90, 
           shadow=True, explode=[0.05]*len(card_distribution))
    ax.axis('equal')
    st.pyplot(fig)

with tab2:
    st.header("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    col1, col2, col3 = st.columns(3)
    with col1:
        merchants = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + list(transactions['merchant'].unique())
        selected_merchant = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", merchants)
    
    with col2:
        statuses = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + list(transactions['status'].unique())
        selected_status = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", statuses)
    
    with col3:
        card_types = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + list(transactions['card_type'].unique())
        selected_card = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£", card_types)
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    filtered_transactions = transactions.copy()
    if selected_merchant != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        filtered_transactions = filtered_transactions[filtered_transactions['merchant'] == selected_merchant]
    if selected_status != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        filtered_transactions = filtered_transactions[filtered_transactions['status'] == selected_status]
    if selected_card != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        filtered_transactions = filtered_transactions[filtered_transactions['card_type'] == selected_card]
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    st.dataframe(
        filtered_transactions.sort_values('timestamp', ascending=False),
        column_config={
            "id": "‡∏£‡∏´‡∏±‡∏™‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°",
            "timestamp": st.column_config.DatetimeColumn("‡πÄ‡∏ß‡∏•‡∏≤", format="DD/MM/YYYY HH:mm"),
            "merchant": "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
            "category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
            "amount": st.column_config.NumberColumn("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", format="‡∏ø%.2f"),
            "card_type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£",
            "status": st.column_config.Column("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", help="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°"),
        },
        hide_index=True,
        use_container_width=True,
    )

with tab3:
    st.header("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á", len(risk_analysis['high_risk']))
        if len(risk_analysis['high_risk']) > 0:
            high_risk_txns = transactions[transactions['id'].isin(risk_analysis['high_risk'])]
            st.dataframe(
                high_risk_txns[['id', 'merchant', 'amount', 'status']],
                hide_index=True,
                use_container_width=True
            )
    with col2:
        st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", len(risk_analysis['medium_risk']))
    with col3:
        st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥", len(risk_analysis['low_risk']))
    
    # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    risk_distribution = {
        '‡∏™‡∏π‡∏á': len(risk_analysis['high_risk']),
        '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': len(risk_analysis['medium_risk']),
        '‡∏ï‡πà‡∏≥': len(risk_analysis['low_risk'])
    }
    
    st.subheader("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(risk_distribution.keys(), risk_distribution.values(), color=['#d62728', '#ff7f0e', '#2ca02c'])
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á
    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.1, f'{height}', 
                ha='center', va='bottom')
    
    ax.set_xlabel('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á')
    ax.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°')
    ax.grid(axis='y', linestyle='--', alpha=0.7)
    st.pyplot(fig)

with tab4:
    st.header("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    selected_merchant_rec = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", 
        list(transactions['merchant'].unique()),
        key="recommendation_merchant"
    )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    st.subheader(f"‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_merchant_rec}")
    
    recommended_cards = recommend_card(selected_merchant_rec)
    
    for card in recommended_cards:
        st.success(f"üí≥ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£ {card} ‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    merchant_txns = transactions[transactions['merchant'] == selected_merchant_rec]
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ", len(merchant_txns))
        st.metric("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"‡∏ø{merchant_txns['amount'].mean():,.2f}")
    
    with col2:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        card_counts = merchant_txns['card_type'].value_counts()
        
        fig, ax = plt.subplots(figsize=(8, 8))
        ax.pie(card_counts, labels=card_counts.index, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        ax.set_title(f"‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö {selected_merchant_rec}")
        st.pyplot(fig)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏Ç‡πâ‡∏≤‡∏á
with st.sidebar:
    st.header("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    st.info("‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"):
        st.session_state.transactions = generate_transactions(200)
        st.session_state.risk_analysis = analyze_risk(st.session_state.transactions)
        st.rerun()
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    latest_txn = transactions.sort_values('timestamp', ascending=False).iloc[0]
    
    st.write(f"**‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {latest_txn['id']}")
    st.write(f"**‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:** {latest_txn['merchant']}")
    st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:** ‡∏ø{latest_txn['amount']:,.2f}")
    st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {latest_txn['status']}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    st.caption(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")