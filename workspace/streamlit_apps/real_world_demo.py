import random
import time
from datetime import datetime

import chromadb
import pandas as pd
import streamlit as st

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="OpenHands Real-World Demo", page_icon="üëê", layout="wide"
)

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.title("üëê OpenHands AI ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á")
st.markdown("---")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ChromaDB
@st.cache_resource
def get_chroma_client():
    client = chromadb.Client()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ collection ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    try:
        collection = client.get_collection("merchant_transactions")
    except:
        collection = client.create_collection("merchant_transactions")

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        collection.add(
            documents=[
                "Amazon - Visa - 4532XXXXXXXX1234 - Success",
                "Shopify - Mastercard - 5421XXXXXXXX6789 - Failed",
                "Walmart - Visa - 4111XXXXXXXX1111 - Success",
                "eBay - Amex - 3782XXXXXXXX1000 - Failed",
                "Etsy - Discover - 6011XXXXXXXX2012 - Success",
            ],
            metadatas=[
                {
                    "merchant": "Amazon",
                    "card_type": "Visa",
                    "bin": "453212",
                    "result": "Success",
                },
                {
                    "merchant": "Shopify",
                    "card_type": "Mastercard",
                    "bin": "542101",
                    "result": "Failed",
                },
                {
                    "merchant": "Walmart",
                    "card_type": "Visa",
                    "bin": "411111",
                    "result": "Success",
                },
                {
                    "merchant": "eBay",
                    "card_type": "Amex",
                    "bin": "378282",
                    "result": "Failed",
                },
                {
                    "merchant": "Etsy",
                    "card_type": "Discover",
                    "bin": "601112",
                    "result": "Success",
                },
            ],
            ids=["trans1", "trans2", "trans3", "trans4", "trans5"],
        )

    return client


# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° ChromaDB
client = get_chroma_client()
collection = client.get_collection("merchant_transactions")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
with st.sidebar:
    st.header("‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    merchant = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
        ["Amazon", "Shopify", "Walmart", "eBay", "Etsy", "Alibaba", "Lazada"],
    )

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£
    card_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£", ["Visa", "Mastercard", "Amex", "Discover"])

    # ‡πÉ‡∏™‡πà BIN
    bin_number = st.text_input("BIN (6 ‡∏´‡∏•‡∏±‡∏Å)", "451234")

    # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    use_ai = st.checkbox("‡πÉ‡∏ä‡πâ AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", True)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    process_button = st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£", type="primary")

# ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ChromaDB ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    results = collection.get()
    if results["ids"]:
        df = pd.DataFrame(
            {
                "Merchant": [meta["merchant"] for meta in results["metadatas"]],
                "Card Type": [meta["card_type"] for meta in results["metadatas"]],
                "BIN": [meta["bin"] for meta in results["metadatas"]],
                "Result": [meta["result"] for meta in results["metadatas"]],
            }
        )
        st.dataframe(df, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")

with col2:
    st.subheader("üìù ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    if results["ids"]:
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        success_count = sum(
            1 for meta in results["metadatas"] if meta["result"] == "Success"
        )
        failed_count = len(results["ids"]) - success_count

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏£‡∏∏‡∏õ
        st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"{success_count / len(results['ids']) * 100:.1f}%")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")

# ‡∏™‡πà‡∏ß‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
st.markdown("---")
st.subheader("üöÄ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
def recommend_card(merchant_name):
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    merchant_results = collection.get(
        where={
            "$and": [
                {"merchant": {"$eq": merchant_name}},
                {"result": {"$eq": "Success"}},
            ]
        }
    )

    if not merchant_results["ids"]:
        return None, None

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    card_types = [meta["card_type"] for meta in merchant_results["metadatas"]]
    bins = [meta["bin"] for meta in merchant_results["metadatas"]]

    if card_types and bins:
        return random.choice(card_types), random.choice(bins)
    return None, None


# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
if process_button:
    # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏±‡∏ï‡∏£
    if use_ai:
        recommended_card, recommended_bin = recommend_card(merchant)
        if recommended_card:
            st.info(
                f"AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£ {recommended_card} ‡∏Å‡∏±‡∏ö BIN {recommended_bin} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {merchant}"
            )
            card_type = recommended_card
            bin_number = recommended_bin

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    st.text("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...")
    progress_bar = st.progress(0)

    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    for i in range(101):
        progress_bar.progress(i)
        time.sleep(0.02)

    # ‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    result = random.choice(["Success", "Failed"])

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if result == "Success":
        st.success(
            f"‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {merchant} ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£ {card_type} ‡∏Å‡∏±‡∏ö BIN {bin_number}"
        )
    else:
        st.error(
            f"‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {merchant} ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ö‡∏±‡∏ï‡∏£ {card_type} ‡∏Å‡∏±‡∏ö BIN {bin_number}"
        )

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á‡πÉ‡∏ô ChromaDB
    current_time = datetime.now().strftime("%Y%m%d%H%M%S")
    collection.add(
        documents=[f"{merchant} - {card_type} - {bin_number} - {result}"],
        metadatas=[
            {
                "merchant": merchant,
                "card_type": card_type,
                "bin": bin_number,
                "result": result,
            }
        ],
        ids=[f"trans{current_time}"],
    )

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    st.rerun()

# ‡πÄ‡∏û‡∏¥‡πà‡∏° footer
st.markdown("---")
st.markdown(
    "**OpenHands AI Real-World Demo** | ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Streamlit, ChromaDB ‡πÅ‡∏•‡∏∞ OpenHands AI"
)
